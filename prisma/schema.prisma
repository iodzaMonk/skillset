generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Category {
  Editing
  Voiceover
  Design
  Drawing
  Fixing
  Music
}

enum Status {
  ACCEPT
  REVIEW
  DECLINE
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model commands {
 id          String       @id @unique @default(cuid())
  client_id   String
  product_id  String
  date        DateTime    @db.Date
  prof_id     String
  description String
  status      Status      @default(ACCEPT)
  posts       posts       @relation(fields: [product_id], references: [id], onDelete: Cascade)
  client      users       @relation("ClientCommands", fields: [client_id], references: [id], onDelete: Cascade)
  professional users      @relation("ProfessionalCommands", fields: [prof_id], references: [id], onDelete: Cascade)
}

model posts {
  id             String     @id(map: "products_pkey") @unique(map: "products_id_key") @default(cuid())
  user_id        String
  title          String     @db.VarChar
  description    String
  rating         Float?
  ratingCount    Int        @default(0)
  price          Float      @db.Real
  date           DateTime   @default(now()) @db.Date
  image_location String?    @db.VarChar
  category       Category   @default(Editing)
  commands       commands[]
  users          users      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "products_user_id_fkey")
  reviews        reviews[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model reviews {
  id         String    @id(map: "review_pkey") @unique @default(cuid())
  parent_id  String?   @db.VarChar
  user_id    String
  product_id String
  text       String
  rating     Int?      @db.SmallInt
  date       DateTime? @db.Date
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "review_user_id_fkey")
  posts      posts     @relation(fields: [product_id], references: [id], onDelete: Cascade)
  parent     reviews?  @relation("ReviewReplies", fields: [parent_id], references: [id])
  replies    reviews[] @relation("ReviewReplies")

  @@index([product_id, parent_id])
}

model users {
  id                                 String     @id @default(cuid())
  name                               String     @db.VarChar
  email                              String     @unique @db.VarChar
  password                           String     @db.VarChar
  country                            String     @db.VarChar
  birthday                           DateTime?  @db.Date
  isAdmin                            Boolean?
  vendor_id                          String?    @db.VarChar
  clientCommands    commands[] @relation("ClientCommands")
  profCommands     commands[] @relation("ProfessionalCommands")
  posts                              posts[]
  reviews                            reviews[]
}
